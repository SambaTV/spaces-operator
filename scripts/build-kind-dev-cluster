#!/usr/bin/env bash
# This script installs a Kind cluster with a local docker registry exposed on port 5000.
# This script is typically run once as part of an on-boarding activity.
set -o errexit

app_name=$(jq -r '.app_name' METADATA.json)

# Create local registry container unless it already exists.
reg_name='kind-registry'
reg_port='5001'
running="$(docker inspect -f '{{.State.Running}}' "${reg_name}" 2>/dev/null || true)"
if [ "${running}" != 'true' ]; then
  echo "starting local kind registry"
  docker run \
    -d --restart=always -p "127.0.0.1:${reg_port}:${reg_port}" --name "${reg_name}" \
    registry:2
fi

# Create local kind cluster with the local registry enabled in containerd.
if [[ $(kind get clusters) == *"$app_name"* ]]; then
  echo "skipping creation of existing kind cluster $app_name"
else
  cat <<EOF | kind create cluster --config=-
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
name: $app_name
containerdConfigPatches:
- |-
  [plugins."io.containerd.grpc.v1.cri".registry.mirrors."localhost:${reg_port}"]
    endpoint = ["http://${reg_name}:${reg_port}"]
EOF
fi

# connect the registry to the cluster network if not already connected
if [ "$(docker inspect -f='{{json .NetworkSettings.Networks.kind}}' "${reg_name}")" = 'null' ]; then
  docker network connect "kind" "${reg_name}"
fi

# Document the local registry.
# https://github.com/kubernetes/enhancements/tree/master/keps/sig-cluster-lifecycle/generic/1755-communicating-a-local-registry
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: local-registry-hosting
  namespace: kube-public
data:
  localRegistryHosting.v1: |
    host: "localhost:${reg_port}"
    help: "https://kind.sigs.k8s.io/docs/user/local-registry/"
EOF

echo "kind cluster $app_name ready for development use"
